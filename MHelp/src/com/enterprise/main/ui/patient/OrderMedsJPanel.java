/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.enterprise.main.ui.patient;

import com.enterprise.main.Business;
import com.enterprise.main.Profiles.PatientProfile;
import com.enterprise.main.Profiles.PharmacyProfile;
import com.enterprise.main.directory.Medicine;
import com.enterprise.main.directory.MedicineCatalog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shrey
 */
public class OrderMedsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrderMedsJPanel
     */
      javax.swing.JPanel CardSequencePanel;
    Business business;
    PatientProfile patientProfile;
    Properties properties;
    PharmacyProfile pharmacyProfile;
    private Medicine selectedMedicine;
    
    
    public OrderMedsJPanel(JPanel workArea, Business business, PatientProfile patientProfile, Properties properties) {
          initComponents();
        this.properties = properties;
        this.CardSequencePanel = CardSequencePanel;
        this.business = business;
        this.patientProfile = patientProfile;
        this.pharmacyProfile = pharmacyProfile;

        updateMedicineCatalogTable();

        populateMedicineCatalogTable();

        tblProductCatalog.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    handleMedicineCatalogRowSelection();
                }
            }
        });
    }
  
    
    





    private void updateMedicineCatalogTable() {
    DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
    model.setRowCount(0);

    MedicineCatalog medicineCatalog = business.getPharmacyDirectory().getMedicineCatalog();
    ArrayList<Medicine> medicineList = medicineCatalog.getMedicineCatalog();

    for (Medicine medicine : medicineList) {
        if (medicine.isMedAvail()) {
            Object[] rowData = {
                    medicine.getMedName(),
                    medicine.getMedId(),
                    medicine.getPrice(),
                    medicine.isMedAvail()
            };
            model.addRow(rowData);
        }
    }
}

private void populateMedicineCatalogTable() {
    MedicineCatalog medicineCatalog = business.getPharmacyDirectory().getMedicineCatalog();
    ArrayList<Medicine> medicineList = medicineCatalog.getMedicineCatalog();
    DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();

    model.setRowCount(0);

    for (Medicine medicine : medicineList) {
        if (medicine.isMedAvail()) {
            Object[] rowData = {
                    medicine.getMedName(),
                    medicine.getMedId(),
                    medicine.getPrice(),
                    medicine.isMedAvail()
            };
            model.addRow(rowData);
        }
    }
}

private void handleMedicineCatalogRowSelection() {
    int selectedRow = tblProductCatalog.getSelectedRow();

    if (selectedRow != -1) {
        int medId = (int) tblProductCatalog.getValueAt(selectedRow, 1);
        selectedMedicine = business.getPharmacyDirectory().getMedicineCatalog().searchMedicine(medId);

        if (selectedMedicine != null) {
            txtSalesPrice.setText(String.valueOf(selectedMedicine.getPrice()));
        } else {
            txtSalesPrice.setText("");
        }
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSalesPrice = new javax.swing.JTextField();
        btnRemoveOrderItem = new javax.swing.JButton();
        lblQuantity = new javax.swing.JLabel();
        btnCheckOut = new javax.swing.JButton();
        spnQuantity = new javax.swing.JSpinner();
        btnAddToCart = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        lblItemsInCart = new javax.swing.JLabel();
        btnSearchProduct = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        lblProductCatalogue = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductCatalog = new javax.swing.JTable();
        txtNewQuantity = new javax.swing.JTextField();
        btnModifyQuantity = new javax.swing.JButton();
        lblSalesPrice = new javax.swing.JLabel();

        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        lblQuantity.setText("Quantity:");

        btnCheckOut.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        spnQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        btnAddToCart.setText("Add to Cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        lblItemsInCart.setText("Items in cart:");

        btnSearchProduct.setText("Search Product");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCart);

        lblProductCatalogue.setText("Medicine Catalog:");

        tblProductCatalog.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        tblProductCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Medicine Id", "Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductCatalog);

        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        lblSalesPrice.setText("Sales Price:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(82, 82, 82)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnSearchProduct))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                        .addComponent(jScrollPane2)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnModifyQuantity)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemoveOrderItem))
                        .addComponent(lblProductCatalogue)
                        .addComponent(lblItemsInCart)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblSalesPrice)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lblQuantity)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnAddToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(237, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblProductCatalogue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSalesPrice)
                    .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuantity)
                    .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddToCart))
                .addGap(18, 18, 18)
                .addComponent(lblItemsInCart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveOrderItem)
                    .addComponent(btnModifyQuantity)
                    .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int selectedRowIndex = tblCart.getSelectedRow();

    if (selectedRowIndex != -1) {
        DefaultTableModel cartModel = (DefaultTableModel) tblCart.getModel();
        cartModel.removeRow(selectedRowIndex);

        JOptionPane.showMessageDialog(this, "Item removed from the cart.", "Success", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to remove.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
   DefaultTableModel cartModel = (DefaultTableModel) tblCart.getModel();

    if (cartModel.getRowCount() > 0) {
        double totalPrice = 0.0;

        for (int i = 0; i < cartModel.getRowCount(); i++) {
            Object totalAmountObject = cartModel.getValueAt(i, 3);
            if (totalAmountObject != null) {
                totalPrice += Double.parseDouble(totalAmountObject.toString());
            }
        }

        JOptionPane.showMessageDialog(this, "Total Price: $" + totalPrice+ "Your order will be delievered in next 7days", "Checkout", JOptionPane.INFORMATION_MESSAGE);

    } else {
        JOptionPane.showMessageDialog(this, "Your cart is empty. Please add medicines before checking out.", "Error", JOptionPane.ERROR_MESSAGE);
    }  
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:
int quantity = (int) spnQuantity.getValue();

    if (selectedMedicine != null && quantity > 0) {
        double totalPrice = Double.parseDouble(selectedMedicine.getPrice()) * quantity;

        DefaultTableModel cartModel = (DefaultTableModel) tblCart.getModel();
        Object[] rowData = {
                selectedMedicine.getMedName(),
                selectedMedicine.getPrice(),
                quantity,
                totalPrice
        };
        
        cartModel.insertRow(0, rowData);

        clearFields();
        JOptionPane.showMessageDialog(this, "Medicine added to cart. You can proceed to checkout.", "Success", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Please select a medicine and enter a valid quantity.");
    }
    

    }//GEN-LAST:event_btnAddToCartActionPerformed
        private void clearFields() {
            txtSalesPrice.setText("");
            spnQuantity.setValue(0);
        }
    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        String searchText = txtSearch.getText().trim().toLowerCase();

    if (!searchText.isEmpty()) {
        MedicineCatalog medicineCatalog = business.getPharmacyDirectory().getMedicineCatalog();
        ArrayList<Medicine> searchResults = medicineCatalog.searchMedicineByNameOrId(searchText);

        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);

        for (Medicine medicine : searchResults) {
            Object[] rowData = {
                    medicine.getMedName(),
                    medicine.getMedId(),
                    medicine.getPrice(),
                    medicine.isMedAvail()
            };
            model.addRow(rowData);
        }
    } else {
        populateMedicineCatalogTable();
    }
       
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCart.getSelectedRow();

    if (selectedRowIndex != -1) {
        int modifiedQuantity = Integer.parseInt(txtNewQuantity.getText());
        double pricePerUnit = Double.parseDouble(tblCart.getValueAt(selectedRowIndex, 1).toString());

        double totalPrice = modifiedQuantity * pricePerUnit;

        tblCart.setValueAt(modifiedQuantity, selectedRowIndex, 2); 
        tblCart.setValueAt(totalPrice, selectedRowIndex, 3);       

        JOptionPane.showMessageDialog(this, "Quantity modified successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

        txtNewQuantity.setText("");
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to modify.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnModifyQuantityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblItemsInCart;
    private javax.swing.JLabel lblProductCatalogue;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblSalesPrice;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblProductCatalog;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtSalesPrice;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
