/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.enterprise.main.ui.patient;

import com.enterprise.main.Business;
import com.enterprise.main.Profiles.DoctorProfile;
import com.enterprise.main.Profiles.PatientProfile;
import com.enterprise.main.appointment.Appointment;
import com.enterprise.main.appointment.AppointmentDirectory;
import com.enterprise.main.directory.DoctorDirectory;
import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Properties;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author karthikv
 */
public class DoctorDetailsPatientDisplay extends javax.swing.JPanel {

    javax.swing.JPanel CardSequencePanel;
    Business business;
    PatientProfile patientProfile;
    Properties properties;
    DoctorProfile doctor;

    DoctorDetailsPatientDisplay(JPanel CardSequencePanel, Business business, PatientProfile patientProfile, Properties properties, DoctorProfile doctor) {
        initComponents();
        this.properties = properties;
        this.CardSequencePanel = CardSequencePanel;
        this.business = business;
        this.patientProfile = patientProfile;
        this.doctor = doctor;

        populatedetails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDoctorsName = new javax.swing.JTextField();
        txtSpecialization = new javax.swing.JTextField();
        txtYearsExperience = new javax.swing.JTextField();
        txteducation = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtcharges = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txtCity = new javax.swing.JTextField();
        labelIcon = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        txtDoctorsName.setEditable(false);
        txtDoctorsName.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtSpecialization.setEditable(false);
        txtSpecialization.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtYearsExperience.setEditable(false);
        txtYearsExperience.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txteducation.setEditable(false);
        txteducation.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txteducation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txteducationActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("You Pay:");

        txtcharges.setEditable(false);
        txtcharges.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtcharges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtchargesActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton1.setText("Book Now");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtCity.setEditable(false);
        txtCity.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        labelIcon.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(labelIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtCity, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtcharges)
                        .addGap(85, 85, 85))
                    .addComponent(txteducation)
                    .addComponent(txtDoctorsName)
                    .addComponent(txtSpecialization)
                    .addComponent(txtYearsExperience))
                .addGap(181, 181, 181))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtDoctorsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(txtYearsExperience, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txteducation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtcharges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(37, 37, 37)
                .addComponent(jButton1)
                .addContainerGap(211, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txteducationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txteducationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txteducationActionPerformed

    private void txtchargesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtchargesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtchargesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        AppointmentDirectory appointmentDirectory = business.getAppointmentDirectory();
        boolean statusdoctor = appointmentDirectory.anyActiveAppointmentDoctor(doctor);
        boolean statuspatient = appointmentDirectory.anyActiveAppointmentPatient(patientProfile);
//update this to check if there are any active with both their matching Ids
        if (statusdoctor) {
            JOptionPane.showMessageDialog(this, "Doctor is another Appointment you can wait or book through some other Doctor is something Urgent");

        } else if (statuspatient) {
            JOptionPane.showMessageDialog(this, "You already have an active appointment Please close if you want to change booking or contact Admin");

        } else if (doctor.getStatus().equals("Busy")) {
            JOptionPane.showMessageDialog(this, "Doctor is Busy you can wait or book through some other Doctor is something Urgent");
        } else if (doctor.getStatus().equals("Offline")) {
            JOptionPane.showMessageDialog(this, "Doctor is Offline you can wait or book through some other Doctor is something Urgent");

        } else {
            UUID uuid = UUID.randomUUID();
            int userid = Math.abs(uuid.hashCode());

            Appointment appointment = appointmentDirectory.newAppointment(userid, patientProfile, doctor, Date.from(Instant.now()));

            String url = properties.getProperty("url");
//        
            String userdbName = properties.getProperty("userdbName");
            String pass = properties.getProperty("passwordDB");
            patientProfile.newPatientAppointment(userid, patientProfile, doctor, Date.from(Instant.now()));

            doctor.newDoctorAppointment(userid, patientProfile, doctor, Date.from(Instant.now()));

            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection connection = DriverManager.getConnection(url, userdbName, pass);
                Statement statement = connection.createStatement();
                String sql = "INSERT INTO appointments VALUES ('" + appointment.getAppointmentid() + "','" + appointment.getAppointmentStatus() + "','" + appointment.getPatientProfile().getPerson().getId() + "','" + appointment.getDoctorProfile().getPerson().getId() + "','"
                        + new java.sql.Date(appointment.getDate().getTime()) + "')";
                statement.executeUpdate(sql);

                JOptionPane.showMessageDialog(this, "Appointment Request Submitted");

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AppointmentDirectory.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(AppointmentDirectory.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelIcon;
    private javax.swing.JLabel lblImage;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDoctorsName;
    private javax.swing.JTextField txtSpecialization;
    private javax.swing.JTextField txtYearsExperience;
    private javax.swing.JTextField txtcharges;
    private javax.swing.JTextField txteducation;
    // End of variables declaration//GEN-END:variables

    private void populatedetails() {
        String inputDate = doctor.getYearOfExperience();
        LocalDate enteredDate = LocalDate.parse(inputDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate currentDate = LocalDate.now();
        Period period = Period.between(enteredDate, currentDate);
        int years = period.getYears();
        String yearvalue = String.valueOf(years + " Years Experience");
        txtCity.setText(doctor.getPerson().getCity());
        txtDoctorsName.setText(doctor.getPerson().getFirstName() + " " + doctor.getPerson().getLastName());
        txtSpecialization.setText(doctor.getSpeciality());
        txteducation.setText(doctor.getEducation());
        txtYearsExperience.setText(String.valueOf(yearvalue));
        txtSpecialization.setText(doctor.getSpeciality());
        txtcharges.setText(String.valueOf(doctor.getCost()));
        lblImage.setIcon(new ImageIcon(this.getClass().getResource("/Images/DoctorIcon.png")));
        labelIcon.setIcon(new ImageIcon(this.getClass().getResource("/Images/locationicon.png")));

    }
}
